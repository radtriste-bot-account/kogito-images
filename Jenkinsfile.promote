// Promote images
@Library('jenkins-pipeline-shared-libraries')_

IMAGES = ["kogito-quarkus-ubi8", 
                    "kogito-quarkus-jvm-ubi8",
                    "kogito-quarkus-ubi8-s2i",
                    "kogito-springboot-ubi8",
                    "kogito-springboot-ubi8-s2i",
                    "kogito-data-index",
                    "kogito-jobs-service",
                    "kogito-management-console"]

def deployProperties


pipeline {
    agent {
        label 'kogito-image-slave && !master'
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        booleanParam(name: 'BASE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if base image should be retrieved from Openshift registry.In this case, BASE_IMAGE_REGISTRY_CREDENTIALS, BASE_IMAGE_REGISTRY and BASE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'BASE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Base Image registry credentials to use to deploy images. Will be ignored if no BASE_IMAGE_REGISTRY is given')
        string(name: 'BASE_IMAGE_REGISTRY', defaultValue: '', description: 'Base image registry')
        string(name: 'BASE_IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Base image namespace')
        string(name: 'BASE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Base image name suffix')
        string(name: 'BASE_IMAGE_TAG', defaultValue: '', description: 'Base image tag')

        booleanParam(name: 'PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if base image should be deployed in Openshift registry.In this case, PROMOTE_IMAGE_REGISTRY_CREDENTIALS, PROMOTE_IMAGE_REGISTRY and PROMOTE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'PROMOTE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Promote Image registry credentials to use to deploy images. Will be ignored if no PROMOTE_IMAGE_REGISTRY is given')
        string(name: 'PROMOTE_IMAGE_REGISTRY', defaultValue: '', description: 'Promote image registry')
        string(name: 'PROMOTE_IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Promote image namespace')
        string(name: 'PROMOTE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Promote image name suffix')
        string(name: 'PROMOTE_IMAGE_TAG', defaultValue: '', description: 'Promote image tag')

        booleanParam(name: 'DEPLOY_WITH_LATEST_TAG', defaultValue: false, description: 'Set to true if you want the deployed images to also be with the `latest` tag')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`')
        string(name : 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the deployment.properties file')
        string(name : 'GIT_TAG' , defaultValue: '' , description : '')
         
    }

    environment {
        OPENSHIFT_API = credentials("OPENSHIFT_API")
        OPENSHIFT_REGISTRY = credentials("OPENSHIFT_REGISTRY")
        OPENSHIFT_CREDS_KEY = "OPENSHIFT_CREDS"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanImages()

                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                        readDeployProperties()
                        params.RELEASE = getRelease("release")
                    }
                }
            }
        }
        stage('Pull "old" images'){
            steps{
                script {
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != ''){
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }
                    pullImages()
                }
            }
        }
        stage('Tag images'){
            steps{
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing'){
            steps{
                script {
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != ''){
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }
                    pushImages()
                }
            }
        }
        stage('Merge PR')
        {
            when {
                expression {
                    return params.RELEASE && params.DEPLOY_BUILD_URL != ''
                }
            }
            steps{
                script {
                    githubscm.mergePR(deployProperties['kogito-images.pr.link'])
                }
            }
        }
        stage('Git Tag')
        {
            when {
                return params.RELEASE && params.DEPLOY_BUILD_URL != ''
            }
            steps {
                script {
                    checkout(githubscm,resolveRepository("kogito-images", params.GIT_AUTHOR, params.BUILD_BRANCH_NAME, false))
                    def tagName = getGitTag()
                    githubscm.tagRepository( , env.BUILD_TAG)
                }
            }
        }
        stage('Snapshot')
        {
            when {
                expression {
                    return params.RELEASE
                }
            }
            steps {
                script{
                   def verison = getVersion("project.version")
                   sh "python manage-kogito-version.py --bump-to ${utils.getnextSnapshot(version)}"
                }
            }
        }
    }
}

void cleanImages(){
    sh "podman rm -f \$(podman ps -a -q) || date"
    sh "podman rmi -f \$(podman images -q) || date"
}

void pullImages(){
    for(String imageName : IMAGES){
        sh "podman pull ${getOldImageFullTag(imageName)}"
    }
}

void tagImages() {
    for(String imageName : IMAGES){
        sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

void pushImages(){
    for(String imageName : IMAGES){
        sh "podman push ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman push ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

String getOldImageFullTag(String imageName){
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${buildImageNameWithSuffix(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag){
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${buildImageNameWithSuffix(imageName, getNewImageNameSuffix())}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if(suffix != null && suffix != '') {
        finalImageName += "-" + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag(){
    return params.DEPLOY_WITH_LATEST_TAG
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && podman login -u anything -p \$(oc whoami -t) --tls-verify=false ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId){
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "podman login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} --tls-verify=false ${registry}"
    }
}
void readDeployProperties(){
    if(params.DEPLOY_BUILD_URL != null){
        sh "wget --auth-no-challenge --user=${JENKINS_USER} --password=${JENKINS_TOKEN} ${params.DEPLOY_BUILD_URL}artifact/deployment.properties"
        deployProperties = readProperties file:"deployment.properties"
    }
}
bool getRelease(String key){
    if(deployProperties[key] != null){
        return deployProperties[key] == "true"
    }
}
String getVersion(String key){
    if(deployProperties[key] != null){
        return deployProperties[key]
    }
}
String getGitTag(){
    return params.GIT_TAG != "" ? params.GIT_TAG : getVersion("project.version")
}
////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

boolean isOldImageInOpenshiftRegistry(){
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials(){
    return isOldImageInOpenshiftRegistry() ? "" : params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry(){
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.BASE_IMAGE_REGISTRY
}

String getOldImageNamespace(){
    return isOldImageInOpenshiftRegistry() ? "openshift" : params.BASE_IMAGE_NAMESPACE
}

String getOldImageNameSuffix(){
    return params.BASE_IMAGE_NAME_SUFFIX
}

String getOldImageTag(){
    return params.BASE_IMAGE_TAG
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry(){
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials(){
    return isNewImageInOpenshiftRegistry() ? "" : params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry(){
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace(){
    return isNewImageInOpenshiftRegistry() ? "openshift" : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix(){
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getParam(String keyPrefix, String keyId){
    return params."${getKey(keyPrefix, keyId)}"
}

