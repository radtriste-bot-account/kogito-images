// Promote images
@Library('jenkins-pipeline-shared-libraries')_

deployProperties=[:]

pipeline {
    agent {
        label 'kogito-image-slave && !master'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }
    // parameters {
    // For parameters, check into ./dsl/nightly_release.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs/nightly_release.groovy file
        
        CI = true // Used by scripts
        
        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'
        
        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        
        GITHUB_REPO = 'kogito-images' // for github-release cli
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if(isRelease()) {
                        assert getProjectVersion() != ''
                    }

                    dir('kogito-images') {
                        checkoutRepo()
                    }

                    installGitHubReleaseCLI()
                }
            }
        }
        stage('Update PR with released Maven artifacts') {
            when {
                expression { return isRelease() && getPRSourceBranch() != ''}
            }
            steps {
                script {
                    // Update maven information with new artifacts from Maven central in the PR
                    dir('kogito-images-update'){
                        checkoutRepo()
                        githubscm.forkRepo(getBotAuthorCredsID())

                        // Get the working branch
                        sh 'git fetch origin'
                        sh "git checkout ${getPRSourceBranch()}"

                        // Update artifacts
                        updateArtifactCmd = 'python3 scripts/update-maven-artifacts.py'
                        if(getMavenArtifactRepository() != ''){
                            updateArtifactCmd += " --repo-url ${getMavenArtifactRepository()}"
                        }
                        sh updateArtifactCmd

                        // Debug purpose in case of issue
                        sh 'cat modules/kogito-data-index-infinispan/module.yaml'
                        sh 'cat modules/kogito-data-index-mongodb/module.yaml'
                        sh 'cat modules/kogito-trusty/module.yaml'
                        sh 'cat modules/kogito-explainability/module.yaml'
                        sh 'cat modules/kogito-jobs-service/module.yaml'
                        sh 'cat modules/kogito-management-console/module.yaml'
                        sh 'cat modules/kogito-task-console/module.yaml'
                        sh 'cat modules/kogito-trusty-ui/module.yaml'

                        try {
                            githubscm.commitChanges('Setup Maven artifacts to released ones')
                            githubscm.pushObject('origin', getPRSourceBranch(), getBotAuthorCredsID())
                        } catch (err) {
                            withCredentials([string(credentialsId: 'KOGITO_CI_EMAIL_TO', variable: 'ZULIP_EMAIL')]) {
                            emailext body: "Seems like no change is to be committed.\nPlease review in ${env.BUILD_URL}console.\n" +
                                    "And take your decision here: ${env.BUILD_URL}input",
                                    subject: "[${getGitBranch()}] Release Pipeline",
                                    to: ZULIP_EMAIL
                            }
                            input message: 'Should the pipeline continue ?', ok: 'Yes'
                        }
                    }
                }
            }
        }
        stage('Pull "old" images'){
            steps{
                script {
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != ''){
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }
                    dir('kogito-images') {
                        pullImages()
                    }
                }
            }
        }
        stage('Tag images'){
            steps{
                script {
                    dir('kogito-images') {
                        tagImages()
                    }
                }
            }
        }
        stage('Pushing'){
            steps{
                script {
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != ''){
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }
                    dir('kogito-images') {
                        pushImages()
                    }
                }
            }
        }
        stage('Merge PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir('kogito-images') {
                        // Merge PR
                        String prLink = getDeployProperty('kogito-images.pr.link')
                        if(prLink != ''){                            
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getGitBranch(), getGitAuthorCredsID())
                        }

                        if(getGitTag() != ""){
                            def releaseName = "Kogito Images Version ${getProjectVersion()}" 
                            def description = params.RELEASE_NOTES != '' ? params.RELEASE_NOTES : "We are glad to announce that the Kogito ${getProjectVersion()} release is now available!"
                            withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
                                sh """
                                    export GITHUB_USER=${getGitAuthor()}
                                    github-release release --tag ${getGitTag()} --target '${getGitBranch()}' --name '${releaseName}' --description '${description}' --pre-release
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Set next version')
        {
            when {
               expression { return isRelease() }
            }
            steps {
                script {
                    String prLink = ''
                    String nextVersion = getNextVersion()
                    dir('kogito-images-snapshot') { // Use different folder from `Update PR with released Maven artifacts` to avoid conflicts
                        // Prepare PR
                        checkoutRepo()
                        githubscm.forkRepo(getBotAuthorCredsID())
                        githubscm.createBranch(getSnapshotBranch())

                        // Update version to next snapshot
                        versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${nextVersion} --artifacts-version ${getKogitoArtifactsNextVersion()} --confirm"
                        if(getGitBranch() != 'master') {
                            versionCmd += " --examples-ref ${getGitBranch()}"
                        }
                        sh versionCmd

                        def commitMsg = "[${getGitBranch()}] Update snapshot version to ${nextVersion}"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
                        githubscm.commitChanges(commitMsg)
                        githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())
                        prLink = githubscm.createPR(commitMsg, prBody, getGitBranch(), getBotAuthorCredsID())
                    }
                    dir('kogito-images') {
                        if (prLink != '') {
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getGitBranch(), getGitAuthorCredsID())
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            clean()
        }
    }
}

void installGitHubReleaseCLI(){
    sh 'go get github.com/github-release/github-release'
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository('kogito-images', getGitAuthor(), getGitBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getGitBranch()}"
}

void clean() {
    cleanWs()
    cleanImages()
}

void cleanImages(){
    sh 'podman rm -f \$(podman ps -a -q) || date'
    sh 'podman rmi -f \$(podman images -q) || date'
}

void pullImages(){
    for(String imageName : getImages()){
        sh "podman pull ${getOldImageFullTag(imageName)}"
    }
}

void tagImages() {
    for(String imageName : getImages()){
        sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, "latest")}"
        }
        String reducedTag = getReducedTag()
        if(reducedTag != ''){
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, reducedTag)}"
        }
    }
}

void pushImages(){
    for(String imageName : getImages()){
        sh "podman push ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman push ${getNewImageFullTag(imageName, "latest")}"
        }
        String reducedTag = getReducedTag()
        if(reducedTag != ''){
            sh "podman push ${getNewImageFullTag(imageName, reducedTag)}"
        }
    }
}

String getOldImageFullTag(String imageName){
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${buildImageNameWithSuffix(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag){
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${buildImageNameWithSuffix(imageName, getNewImageNameSuffix())}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if(suffix != null && suffix != '') {
        finalImageName += '-' + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag(){
    return params.DEPLOY_WITH_LATEST_TAG
}

String getReducedTag(){
    try {
        String version = getNewImageTag()
        String[] versionSplit = version.split("\\.")
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch(error) {
        echo "${getNewImageTag()} cannot be reduced to the format X.Y"
    }
    return ''
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && podman login -u anything -p \$(oc whoami -t) --tls-verify=false ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId){
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "podman login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} --tls-verify=false ${registry}"
    }
}
void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if(deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}
boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}
String getDeployProperty(String key) {
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}
String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

////////////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty('release') == 'true')
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION' , 'project.version')
}

String getKogitoArtifactsVersion() {
    artifactsVersion = getParamOrDeployProperty('KOGITO_ARTIFACTS_VERSION' , 'kogito_artifacts.version')
    return artifactsVersion ?: getProjectVersion()
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getGitBranch() {
    return env.GIT_BRANCH_NAME
}

String getPRSourceBranch() {
    return getDeployProperty('kogito-images.pr.source.ref')
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID(){
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

String getMavenArtifactRepository() {
    return env.MAVEN_ARTIFACT_REPOSITORY ?: ''
}

String getNextVersion() {
    return util.getNextVersion(getProjectVersion(), 'micro', 'snapshot')
}

// To be later changed by artifacts version parameter
String getKogitoArtifactsNextVersion() {
    return util.getNextVersion(getKogitoArtifactsVersion(), 'micro', 'SNAPSHOT')
}

String getSnapshotBranch(){
    return "${getNextVersion()}-${env.BOT_BRANCH_HASH}"
}

////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return 'kogito-images.image'
}

boolean isOldImageInOpenshiftRegistry(){
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials(){
    return isOldImageInOpenshiftRegistry() ? '' : params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry(){
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty('BASE_IMAGE_REGISTRY' , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace(){
    return isOldImageInOpenshiftRegistry() ? 'openshift' : getParamOrDeployProperty('BASE_IMAGE_NAMESPACE' , "${getOldImagePrefix()}.namespace")
}

String getOldImageNameSuffix(){
    return getParamOrDeployProperty('BASE_IMAGE_NAME_SUFFIX' , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag(){
    return getParamOrDeployProperty('BASE_IMAGE_TAG' , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry(){
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials(){
    return isNewImageInOpenshiftRegistry() ? '' : params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry(){
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace(){
    return isNewImageInOpenshiftRegistry() ? 'openshift' : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix(){
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag(){
    return params.PROMOTE_IMAGE_TAG
}

String[] getImages(){
    return sh(script: "make list | tr '\\n' ','", returnStdout: true).trim().split(',')
}